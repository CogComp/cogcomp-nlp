CONTENTS
=================
1 PURPOSE  
	1.1  Purpose 
	1.2  License 
2 System requirements 
3 Download contents 
4 Dependencies
5 Compiling
6 Running the illinois-nlp-pipeline
7 Troubleshooting 
8 Contact Information 

=================

0. TODO

* write a better ehcache.xml file
** validate cache behavior
** make caching optional
* write a log4j properties file
* verify lemmatizer behavior (WordNet path?)

==============================

1. PURPOSE

This software bundles some basic preprocessing steps that a lot of NLP
applications need, with the goal of making them run locally. Some
components have significant memory requirements, but given a machine
with sufficient memory, you can instantiate a AnnotatorService
object that provides plain text tokenization, Part-of-Speech tagging,
chunking, Named Entity tagging, lemmatization, and dependency and
constituency parsing.

By default, the illinois-nlp-pipeline will cache its outputs in a local
directory, so that if you process overlapping data sets (or process 
the same data set multiple times), it will use a cached copy of the
system outputs and run much faster. 



1.1 ...A LITTLE MORE SPECIFICALLY

The illinois-nlp-pipeline package is intended to be used PROGRAMMATICALLY. 
Some rudimentary command-line functionality is provided principally to
allow you to test that it is working properly.

IllinoisPreprocessor works only for English plain text. You will need
to remove XML/HTML mark-up, as well as formatting like bulleted lists
if you want well-formed output. (IllinoisPreprocesor may generate
output for such texts, but it is not guaranteed that the different
tools will succeed in producing mutually consistent output.)


One important note: if you wish to use your own tokenization, you should 
implement a class that follows the Tokenizer interface from 
illinois-core-utilities, and use it as an argument to a TextAnnotationBuilder
(also from illinois-core-utilities). 


1.2 LICENSE

illinois-nlp-pipeline is available under a Research and Academic use
license. For more details, visit the CCG website and click the
download link for this software.


==============================


2. SYSTEM REQUIREMENTS

This software was developed on the following platform:

Scientific Linux (2.6.32-279.5.2.el6.x86_64)
Java 1.7

The memory required depends on the options you set in the config
file. 2G should be plenty to run the Tokenizer, POS tagger, and
lemmatizer, and Shallow Parser (a.k.a. Chunker).  NER will require
an additional 2G (CoNLL model) or 4G (OntoNotes model). 

TODO: Stanford component memory requirements


If you want to use the software programmatically, look at 
doc/README_DEVELOPER.

==============================

3. DOWNLOAD CONTENTS

config/ : configuration files
dist/ : the Illinois Preprocessor jar
lib/ : dependencies 
scripts/ : scripts to allow command-line test of the Illinois Preprocessor
src/ : source code for the IllinoisPreprocessor
test/ : test files used for the command line test of the Illinois Preprocessor
doc/ : documentation, including this README. 

==============================

4. DEPENDENCIES

This distribution contains all the dependencies needed to run the
Illinois NLP Pipeline. This includes configuration files for some
individual components; scripts to process plain text files from the
command line; and .jar files for the libraries used by the pipeline and
its components.

The list of dependencies is as follows:

commons-beanutils-1.7.0.jar
commons-beanutils-core-1.8.0.jar
commons-cli-1.2.jar
commons-codec-1.8.jar
commons-collections-3.2.1.jar
commons-configuration-1.6.jar
commons-digester-1.8.jar
commons-io-1.3.2.jar
commons-lang-2.3.jar
commons-lang3-3.4.jar
commons-logging-1.1.1.jar
coreUtilities-0.2.5.jar
curator-archive-0.0.3-SNAPSHOT.jar
curator-interfaces-0.7.jar
curator-utils-0.0.4-SNAPSHOT.jar
ehcache-2.8.3.jar
ejml-0.23.jar
gson-2.3.1.jar
hamcrest-core-1.3.jar
httpclient-4.1.2.jar
httpcore-4.1.3.jar
illinois-abstract-server-0.1.jar
illinois-chunker-2.0.1.jar
illinois-chunker-2.0.1-model.jar
illinois-common-resources-1.1.jar
illinois-core-utilities-1.2.14-SNAPSHOT.jar
illinois-lemmatizer-2.1.2-SNAPSHOT.jar
illinois-ner-2.6-models-conll.jar
illinois-ner-2.6-models-ontonotes.jar
illinois-ner-2.8.5-SNAPSHOT.jar
illinois-pos-2.0.2.jar
illinois-pos-2.0.2-model.jar
illinois-tokenizer-0.0.2-SNAPSHOT.jar
java-cup-0.11a.jar
jaxb-api-2.2.7.jar
joda-time-2.1.jar
jollyday-0.4.7.jar
json-simple-1.1.jar
junit-4.11.jar
LBJava-1.0.3.jar
LBJava-NLP-tools-1.0.0.jar
liblinear-1.94.jar
libthrift-0.8.0.jar
logback-classic-0.9.28.jar
logback-core-0.9.28.jar
slf4j-api-1.6.1.jar
stanford-corenlp-3.3.1.jar
stanford-corenlp-3.3.1-models.jar
trove4j-3.0.3.jar
weka-stable-3.6.10.jar
xalan-2.7.0.jar
xercesImpl-2.8.0.jar
xml-apis-1.3.03.jar
xom-1.2.10.jar


You will also need configuration files for the Illinois NER and
Lemmatizer packages.  You will need an ehcache configuration file.
The complete Illinois NLP Pipeline package includes these
configuration files, though you may wish to change them to alter the
relevant behaviors.

==============================

5. COMPILING

See README_DEVELOPER.txt.


==============================

6. RUNNING THE ILLINOIS PREPROCESSOR

This software is intended to be run PROGRAMMATICALLY, not as a tool to
write annotations to file for later use. It has been developed to
allow some of our more complex tools to be run completely within a
single JVM instead of in tandem with the CCG NLP Curator
(http://cogcomp.cs.illinois.edu/page/software_view/Curator).

You need to set the relevant options in the pipeline configuration
file, including specifying the location of the WordNet dictionary files.
The configuration file is used to construct a ResourceManager object,
which is passed to the IllinoisPreprocessor as a constructor argument.

The standard distribution for this package puts dependencies in lib/;
the parser model in data/; and the config file in config/. There are
two sample scripts that are provided to test that the
IllinoisProcessor works after you have downloaded
it. scripts/runPreprocessor.sh takes as arguments a configuration file
and a text file; it processes the text file according to the
properties set in the config file, and writes output to STDOUT.
scripts/testPreprocessor.sh is a self-contained script that calls
runPreprocessor.sh with fixed arguments and compares the output to
some reference output. If the new output and reference output are
different, the script prints an error message and indicates the
differences.

6.1 Running a Simple Command-Line Test

Running the test:

   scripts/testPreprocessor.sh


Running your own text to get a visual sense of what IllinoisPreprocessor is doing:

   scripts/runPreprocessor.sh  config/pipelineConfig.txt [yourTextFile] > [yourOutputFile]


Changing the logging settings: modify config/.  For the
settings in this file to take effect, you will need to put directory
containing it on your classpath.


==============================

PROGRAMMATIC USE

You can check the javadoc for detailed information about the
IllinoisPreprocessor API.

The main class is IllinoisPipelineFactory, in the package
edu.illinois.cs.cogcomp.nlp.pipeline. For an example showing how the
IllinoisPipelineFactory and AnnotatorService (the class it
instantiates, which is the pipeline itself) can be used, look at 
IllinoisNewPipelineTest class PreprocessorTester in
edu.illinois.cs.cogcomp.nlp.main.

To process text input, use the 'getCachedTextAnnotation()' method: 


        ResourceManager rm = new ResourceManager( "config/pipeline-config.properties" );
        AnnotatorService pipeline = IllinoisPipelineFactory.buildPipeline( rm );
        TextAnnotation ta = pipeline.getCachedTextAnnotation( text );

This method takes as its argument a String variable containing the
text you want to process. This String should not be too long --
depending on the annotators you plan to use, a reasonable upper limit
is 1,000 words (fewer if you use resource-intensive annotators).

The method returns a TextAnnotation data structure (see the 
illinois-core-utilities package for details), which contains 
a View corresponding to each annotation source. Each View contains
a set of Constituents and Relations representing the annotator output.




==============================

NOTE: NOT CURRENTLY RELEVANT, BUT WILL ALMOST CERTAINLY BECOME
      RELEVANT AGAIN


CONFIGURATION OPTIONS

The following options MUST be specified in the config file used to
construct the ResourceManager and thus the IllinoisPreprocessor:

usePos	[true|false]
useChunker	true
useLemmatizer	true
jwnlConfigFile	config/jwnl_properties.xml
lemmaCacheFile  data/lemmaCache.txt
updateLemmaCacheFile    false
maxLemmaCacheEntries    100
wordnetPath /shared/trollope/curator/dist/data/WordNet

The first three flags indicate which annotations you want.
IllinoisPreprocessor to provide. The third, fourth, and fifth
flags specify properties of the lemmatizer cache; it will speed
up the lemmatizer considerably if you allocate a large number
(say, 100000) to maxLemmaCacheEntries and set updateLemmaCacheFile
to 'true'. 'lemmaCacheFile' indicates the plain text file that
contains the cache.
'wordnetPath' should point to the root directory of your copy
of WordNet.


==============================

