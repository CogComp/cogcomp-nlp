/**
 * This software is released under the University of Illinois/Research and Academic Use License. See
 * the LICENSE file in the root folder for details. Copyright (c) 2016
 *
 * Developed by: The Cognitive Computation Group University of Illinois at Urbana-Champaign
 * http://cogcomp.org/
 */
// Modifying this comment will cause the next execution of LBJava to overwrite this file.


package edu.illinois.cs.cogcomp.lbjava.nlp;

import edu.illinois.cs.cogcomp.lbjava.classify.Classifier;
import edu.illinois.cs.cogcomp.lbjava.classify.DiscreteFeature;
import edu.illinois.cs.cogcomp.lbjava.classify.DiscretePrimitiveStringFeature;
import edu.illinois.cs.cogcomp.lbjava.classify.FeatureVector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class implements a classifier that takes a {@link Word} as input and
 * generates Boolean features representing interesting information about the
 * forms of the words in a [-2, +2] window around the input word.  The
 * generated features include one that indicates if the entire input word
 * consists only of capital letters, one that indicates if the entire input
 * word consists only of digits, and one that indicates if the entire input
 * word consists only of non-letters.  The same features are also produced
 * for the two words before and after the input word.  If any of those words
 * do not exist, the corresponding features aren't generated.
 * <p/>
 * <p> This class's implementation was automatically generated by the LBJava
 * compiler.
 *
 * @author Nick Rizzolo
 **/
public class WordTypeInformation extends Classifier {
    private static Logger logger = LoggerFactory.getLogger(WordTypeInformation.class);
    public WordTypeInformation() {
        containingPackage = "edu.illinois.cs.cogcomp.lbjava.edu.illinois.cs.cogcomp.lbjava.nlp";
        name = "WordTypeInformation";
    }

    public String getInputType() {
        return "edu.illinois.cs.cogcomp.lbjava.edu.illinois.cs.cogcomp.lbjava.nlp.Word";
    }

    public String getOutputType() {
        return "discrete%";
    }

    private static String[] __allowableValues = DiscreteFeature.BooleanValues;

    public static String[] getAllowableValues() {
        return __allowableValues;
    }

    public String[] allowableValues() {
        return __allowableValues;
    }

    public FeatureVector classify(Object __example) {
        if (!(__example instanceof Word)) {
            String type = __example == null ? "null" : __example.getClass().getName();
            logger.error("Classifier 'WordTypeInformation(Word)' defined on line 71 of CommonFeatures.lbj received '" + type + "' as input.");
            new Exception().printStackTrace();
            System.exit(1);
        }

        Word word = (Word) __example;

        FeatureVector __result;
        __result = new FeatureVector();
        String __id;
        String __value;

        int i;
        Word w = word, last = word;
        for (i = 0; i <= 2 && last != null; ++i) {
            last = (Word) last.next;
        }
        for (i = 0; i > -2 && w.previous != null; --i) {
            w = (Word) w.previous;
        }
        for (; w != last; w = (Word) w.next, ++i) {
            boolean allCapitalized = true, allDigits = true, allNonLetters = true;
            for (int j = 0; j < w.form.length(); ++j) {
                allCapitalized &= Character.isUpperCase(w.form.charAt(j));
                allDigits &= Character.isDigit(w.form.charAt(j));
                allNonLetters &= !Character.isLetter(w.form.charAt(j));
            }
            __id = "" + ("c" + i);
            __value = "" + (allCapitalized);
            __result.addFeature(new DiscretePrimitiveStringFeature(this.containingPackage, this.name, __id, __value, valueIndexOf(__value), (short) 2));
            __id = "" + ("d" + i);
            __value = "" + (allDigits);
            __result.addFeature(new DiscretePrimitiveStringFeature(this.containingPackage, this.name, __id, __value, valueIndexOf(__value), (short) 2));
            __id = "" + ("p" + i);
            __value = "" + (allNonLetters);
            __result.addFeature(new DiscretePrimitiveStringFeature(this.containingPackage, this.name, __id, __value, valueIndexOf(__value), (short) 2));
        }
        return __result;
    }

    public FeatureVector[] classify(Object[] examples) {
        if (!(examples instanceof Word[])) {
            String type = examples == null ? "null" : examples.getClass().getName();
            System.err.println("Classifier 'WordTypeInformation(Word)' defined on line 71 of CommonFeatures.lbj received '" + type + "' as input.");
            new Exception().printStackTrace();
            System.exit(1);
        }

        return super.classify(examples);
    }

    public int hashCode() {
        return "WordTypeInformation".hashCode();
    }

    public boolean equals(Object o) {
        return o instanceof WordTypeInformation;
    }
}

