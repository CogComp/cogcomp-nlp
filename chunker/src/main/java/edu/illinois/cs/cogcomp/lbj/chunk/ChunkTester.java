package edu.illinois.cs.cogcomp.lbj.chunk;

import edu.illinois.cs.cogcomp.lbjava.parse.*;
import edu.illinois.cs.cogcomp.lbjava.nlp.seg.BIOTester;
import edu.illinois.cs.cogcomp.lbjava.util.ClassUtils;


/**
 * This class may be used to produce a detailed report of the <i>phrase by
 * phrase</i> performance of {@link Chunker} on given
 * testing data.  {@link Chunker} must exist before
 * attempting to compile this code.
 *
 * <h4>Usage</h4>
 * <blockquote><code>
 *   java edu.illinois.cs.cogcomp.lbj.chunk.ChunkTester &lt;test data&gt;
 *                                                      [&lt;parser&gt;]
 * </code></blockquote>
 *
 * <h4>Input</h4>
 * <p> The first command line parameter should be filled in with the name of
 * a file containing labeled testing data.  The optional second parameter is
 * the name of a <code>LBJ2.parse.Parser</code> whose constructor takes the
 * name of a file as a <code>String</code> as input and that produces
 * <code>LBJ2.parse.LinkedVector</code> objects representing sentences.  When
 * omitted, the default is {@link CoNLL2000Parser}.
 *
 * <h4>Output</h4>
 * The output is generated by the <code>LBJ2.classify.TestDiscrete</code>
 * class.  See its online documentation at
 * <a href="http://l2r.cs.uiuc.edu/~cogcomp/software/LBJ2/library/LBJ2/classify/TestDiscrete.html">
 *     http://l2r.cs.uiuc.edu/~cogcomp/software/LBJ2/library/LBJ2/classify/TestDiscrete.html</a>.
 *
 * @author Nick Rizzolo
 **/
public class ChunkTester {
    /**
     * Implements the program described above.
     *
     * @param args The command line parameters.
     **/
    public static void main(String[] args) {
        String testFile = null;
        String parserName = null;

        try {
            testFile = args[0];

            if (args.length > 1)
            {
                parserName = args[1];
                if (args.length > 2) throw new Exception();
            }
        }
        catch (Exception e) {
            System.err.println("usage: java edu.illinois.cs.cogcomp.lbj.chunk.ChunkTester <test data> \\\n [<parser>]");
            System.exit(1);
        }

        Parser parser;

        if (parserName == null) parser = new CoNLL2000Parser(testFile);
        else
            parser = ClassUtils.getParser(parserName, new Class[]{ String.class }, new String[]{testFile});

        BIOTester tester = new BIOTester(new Chunker(), new ChunkLabel(), new ChildrenFromVectors(parser));
        tester.test().printPerformance(System.out);
    }
}

