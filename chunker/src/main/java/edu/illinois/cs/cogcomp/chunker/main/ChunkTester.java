/**
 * This software is released under the University of Illinois/Research and Academic Use License. See
 * the LICENSE file in the root folder for details. Copyright (c) 2016
 *
 * Developed by: The Cognitive Computation Group University of Illinois at Urbana-Champaign
 * http://cogcomp.org/
 */
package edu.illinois.cs.cogcomp.chunker.main;

import edu.illinois.cs.cogcomp.chunker.main.lbjava.ChunkLabel;
import edu.illinois.cs.cogcomp.chunker.main.lbjava.Chunker;
import edu.illinois.cs.cogcomp.chunker.utils.CoNLL2000Parser;
import edu.illinois.cs.cogcomp.lbjava.nlp.seg.BIOTester;
import edu.illinois.cs.cogcomp.lbjava.parse.ChildrenFromVectors;
import edu.illinois.cs.cogcomp.lbjava.parse.Parser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;


/**
 * This class may be used to produce a detailed report of the <i>phrase by phrase</i> performance of
 * {@link Chunker} on given testing data. {@link Chunker} must exist before attempting to compile
 * this code.
 *
 * <h3>Usage</h3> <blockquote><code>
 *   java edu.illinois.cs.cogcomp.chunker.main.ChunkTester &lt;test data&gt;
 *                                                      [&lt;parser&gt;]
 * </code></blockquote>
 *
 * <h3>Input</h3>
 * <p>
 * The first command line parameter should be filled in with the name of a file containing labeled
 * testing data. The optional second parameter is the name of a <code>parse.Parser</code> whose
 * constructor takes the name of a file as a <code>String</code> as input and that produces
 * <code>parse.LinkedVector</code> objects representing sentences. When omitted, the default is
 * {@link CoNLL2000Parser}.
 *
 * <h3>Output</h3>
 * The output is generated by the <code>classify.TestDiscrete</code> class.
 *
 * @author Nick Rizzolo
 * @author Updated: Qiang Ning. Oct 2016.
 **/
public class ChunkTester {
    private static final Logger logger = LoggerFactory.getLogger(ChunkTester.class);

    public static void chunkTester(String testFile){
        Parser parser;
        parser = new CoNLL2000Parser(testFile);
        BIOTester tester =
                new BIOTester(new Chunker(), new ChunkLabel(), new ChildrenFromVectors(parser));
        tester.test().printPerformance(System.out);
    }
    public static void chunkTester(String testFile, String modeldir, String modelname){
        Parser parser;
        String lcpath =modeldir+ File.separator+modelname+".lc";
        String lexpath = modeldir+File.separator+modelname+".lex";
        parser = new CoNLL2000Parser(testFile);
        BIOTester tester =
                new BIOTester(new Chunker(lcpath,lexpath), new ChunkLabel(), new ChildrenFromVectors(parser));
        tester.test().printPerformance(System.out);
    }
    public static void main(String[] args){
        if(args.length>3){
            logger.info("Usage: ...ChunkTester testIn.txt [modelDir] [modelName]");
            return;
        }
        String testFileName = args[0];
        logger.info("Test file: "+testFileName);
        if(args.length==1) {
            chunkTester(testFileName);
        }
        else{
            chunkTester(testFileName, args[1], args[2]);
        }
    }
}
