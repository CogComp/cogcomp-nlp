package edu.illinois.cs.cogcomp.comma.lbj;

import edu.illinois.cs.cogcomp.comma.datastructures.Comma;
import edu.illinois.cs.cogcomp.comma.datastructures.CommaSRLSentence;
import edu.illinois.cs.cogcomp.comma.readers.CommaParser;
import edu.illinois.cs.cogcomp.comma.readers.PrettyCorpusReader;
import edu.illinois.cs.cogcomp.comma.datastructures.CommaProperties;
import edu.illinois.cs.cogcomp.core.datastructures.textannotation.*;
import edu.illinois.cs.cogcomp.infer.ilp.OJalgoHook;
import java.util.List;
import java.util.ArrayList;

discrete UnigramRightFeature(Comma c) <- {
    return c.getWordToRight(1);
}

//WORD
discrete% WordFeatures(Comma c) <- {
	String[] ngrams = c.getWordNgrams();
	for(int i = 0; i<ngrams.length; i++)
		sense ngrams[i];
}

//POS
discrete% POSFeatures(Comma c) <- {
	String[] ngrams = c.getPOSNgrams();
	for(int i = 0; i<ngrams.length; i++)
		sense ngrams[i];
}

//CHUNK
discrete% ChunkFeatures(Comma c) <- {
	String[] ngrams = c.getChunkNgrams();
	for(int i = 0; i<ngrams.length; i++)
		sense ngrams[i];
}

//SIBLING-PHRASE
discrete% SiblingPhraseFeatures(Comma c) <- {
	String[] ngrams = c.getSiblingPhraseNgrams();
	for(int i = 0; i<ngrams.length; i++)
		sense ngrams[i];
}

//PARENT-SIBLING-PHRASE
discrete% ParentSiblingPhraseFeatures(Comma c) <- {
	String[] ngrams = c.getParentSiblingPhraseNgrams();
	for(int i = 0; i<ngrams.length; i++)
		sense ngrams[i];
}

//DEPENDENCY
discrete% LeftToRightDependencies(Comma c) <- {
	String[] ltor = c.getLeftToRightDependencies();
	for(int i=0; i<ltor.length; i++)
		sense ltor[i];
}
discrete% RightToLeftDependencies(Comma c) <- {
	String[] rtol = c.getLeftToRightDependencies();
  	for(int i=0; i<rtol.length; i++)
		sense rtol[i];
}

//SRL
discrete% SRLFeature(Comma c) <- {
    List SRLs = c.getContainingSRLs();
    for (int i = 0; i < SRLs.size(); i++) {
        String s = (String) SRLs.get(i);
        sense s;
    }
}


discrete ParseTreeFeature(Comma c) <- {
    String tree = "";
    int distance = 0;
    String phrase;
    do{
      phrase = c.getNotation(c.getPhraseToLeftOfParent(distance));
      tree = phrase + tree;
      distance++;
    }while(!phrase.equals("NULL"));

    String commaLevelPhrases = "";
    distance = 0;
	do{
      phrase = c.getNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));

	distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
	tree += "(" + commaLevelPhrases + ")";

    distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfParent(distance));
      tree = tree + phrase;
      distance++;
    }while(!phrase.equals("NULL"));

    return tree;
    //return commaLevelPhrases;
}

discrete StrippedParseTreeFeature(Comma c) <- {
    String tree = "";
    int distance = 0;
    String phrase;
    do{
      phrase = c.getStrippedNotation(c.getPhraseToLeftOfParent(distance));
      tree = phrase + tree;
      distance++;
    }while(!phrase.equals("NULL"));

    String commaLevelPhrases = "";
    distance = 0;
	do{
      phrase = c.getStrippedNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));

	distance = 1;
    do{
      phrase = c.getStrippedNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));
	tree += "(" + commaLevelPhrases + ")";

    distance = 1;
    do{
      phrase = c.getStrippedNotation(c.getPhraseToRightOfParent(distance));
      tree = tree + phrase;
      distance++;
    }while(!phrase.equals("NULL"));

    return tree;
    //return commaLevelPhrases;
}

discrete CommaSiblingsFeature(Comma c) <- {
    String commaLevelPhrases = "";
    String phrase;
    int distance = 0;
	do{
      phrase = c.getNotation(c.getPhraseToLeftOfComma(distance));
      commaLevelPhrases =  phrase + commaLevelPhrases;
      distance++;
    }while(!phrase.equals("NULL"));

	distance = 1;
    do{
      phrase = c.getNotation(c.getPhraseToRightOfComma(distance));
      commaLevelPhrases = commaLevelPhrases + phrase;
      distance++;
    }while(!phrase.equals("NULL"));

    return commaLevelPhrases;
}

discrete BayraktarPatternFeature(Comma c) <- {
	return c.getBayraktarPattern();
}

discrete BayraktarLabelFeature(Comma c) <- {
	return c.getBayraktarLabel();
}

discrete% DependencyFeatures(Comma c) <- RightToLeftDependencies , LeftToRightDependencies

discrete% ParseFeatures(Comma c) <- SiblingPhraseFeatures , ParentSiblingPhraseFeatures

discrete CommaLabel(Comma c) <- {
	return c.getLabel();
}

/** A learned text classifier; its definition comes from data. */
discrete LocalCommaClassifier(Comma c) <-
learn CommaLabel
	using  POSFeatures, ParseFeatures, BayraktarLabelFeature, ChunkFeatures, WordFeatures
	with new SparseNetworkLearner(new SparseAveragedPerceptron(0.003, 0, 3.5))
	from new CommaParser(new PrettyCorpusReader(CommaProperties.getInstance().getCommaLabeledDataFile()).getSentences(), CommaParser.Ordering.ORDERED, true)
end



constraint substitutePairFirstComma (Sentence s)
{
	forall (Comma c in s.getFirstSiblingCommasWhichAreNotLast())
		((LocalCommaClassifier(c) :: "Substitute") => (LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Substitute"));
}

constraint substitutePairMiddleCommas (Sentence s)
{
	forall (Comma c in s.getMiddleSiblingCommas())
		((LocalCommaClassifier(c) :: "Substitute") =>
												((LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Substitute")
												\/(LocalCommaClassifier(s.getPreviousSiblingComma(c)) :: "Substitute")));
}

//substitute commas must occur in pairs or must be the last comma in the sentence.
constraint substitutePair (Sentence s)
{
	(@substitutePairFirstComma(s) /\ @substitutePairMiddleCommas(s));
}

constraint locativePairFirstComma (Sentence s)
{
	forall (Comma c in s.getFirstSiblingCommasWhichAreNotLast())
		((LocalCommaClassifier(c) :: "Locative") => (LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Locative"));
}

constraint locativePairMiddleCommas (Sentence s)
{
	forall (Comma c in s.getMiddleSiblingCommas())
		((LocalCommaClassifier(c) :: "Locative") =>
												((LocalCommaClassifier(s.getNextSiblingComma(c)) :: "Locative")
												\/(LocalCommaClassifier(s.getPreviousSiblingComma(c)) :: "Locative")));
}

//one exception is "champaign, IL, USA". Here the 2 commas are for two different located in's as compared to "Champaign, IL, is a nice city" where the 2 commas are for one 'located in'
constraint locativePair (Sentence s)
{
	@locativePairFirstComma(s) /\ @locativePairMiddleCommas(s);
}

//if a comma is followed by an 'and', it is a list comma
//can't simply check for next POS tag to be a CC. conflicts with wsj 0015mrg 8 substitute
constraint oxfordComma (Sentence s)
{
	forall (Comma c in s.getCommas())
		((UnigramRightFeature(c) :: "and") =>
											(LocalCommaClassifier(c) :: "List"));
}

//if the commas on either side of a comma are list commas it is a list comma?
constraint listCommas (Sentence s)
{
	forall (Comma c in s.getMiddleSiblingCommas())
		(((LocalCommaClassifier(s.getPreviousSiblingComma(c)) :: "List")
		 /\(LocalCommaClassifier(s.getNextSiblingComma(c)) :: "List")) =>
																	(LocalCommaClassifier(c) :: "List"));
}



inference OxfordCommaConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@oxfordComma(s);}
	with new ILPInference(new OJalgoHook())
}
discrete OxfordCommaConstrainedCommaClassifier (Comma c) <-
	OxfordCommaConstrainedInference(LocalCommaClassifier)

inference SubstitutePairConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@substitutePair(s);}
	with new ILPInference(new OJalgoHook())
}
discrete SubstitutePairConstrainedCommaClassifier (Comma c) <-
	SubstitutePairConstrainedInference(LocalCommaClassifier)

inference LocativePairConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@locativePair(s);}
	with new ILPInference(new OJalgoHook())
}
discrete LocativePairConstrainedCommaClassifier (Comma c) <-
	LocativePairConstrainedInference(LocalCommaClassifier)

inference ListCommasConstrainedInference head Sentence s {
	Comma c {return c.getSentence();}
	subjectto {@listCommas(s);}
	with new ILPInference(new OJalgoHook())
}
discrete ListCommasConstrainedCommaClassifier (Comma c) <-
	ListCommasConstrainedInference(LocalCommaClassifier)
