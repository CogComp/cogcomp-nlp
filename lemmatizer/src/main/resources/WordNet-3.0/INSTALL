
		WordNet 3.0 Installation Instructions

Beginning with Version 2.1, we have changed the Unix package to a GNU
Autotools package.  With Autotools, a system independent installation
process builds and installs WordNet on your specific platform.  Read
both the `Basic Installation' and `WordNet Installation' sections
below before attempting to build and install WordNet.

See the `Running WordNet' section for important information concerning
environment variables and the commands to run WordNet.

The WordNet browser makes use of the open source Tcl and Tk
packages. Many systems come with either or both pre-installed.  If
your system doesn't (some systems have Tcl installed, but not Tk)
Tcl/Tk can be downloaded from:

Linux - http://www.tcl.tk/ 

OS X - http://tcltkaqua.sourceforge.net/ (note that 10.4 comes with
Tcl/Tk preinstalled, but earlier versions may not)

Some Linux systems come with the Tcl/Tk libraries installed, but not
all the header files. If your build fails due to missing Tk headers, a
subset that may be sufficient on your system can be found in the
"include/tk" directory. Copy the header files to the "include" directory
and try the make again.  If it fails, you should download and install
a full copy of Tcl and/or Tk from the site above.

Tcl and Tk must be installed BEFORE you build and install WordNet. You
must also have a C compiler before installing Tcl/Tk or WordNet.
WordNet has been built and tested with the GNU gcc compiler.  This is
pre-installed on most Unix systems, and can be downloaded from:

http://gcc.gnu.org/

Basic Installation
==================

********************************************************************
   These are generic installation instructions. Details specific to
   WordNet follow in the `WordNet Installation' section below.
********************************************************************

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

will cause the specified gcc to be used as the C compiler (unless it is
overridden in the site shell script).

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.


WordNet Installation
====================

By default, WordNet is installed in `/usr/local/WordNet-3.0'.  You
must usually be the `root' user to install something here.  If you
choose to install WordNet in a different location, you must use the
`--prefix=' option to `configure' and specify an installation
directory.

WordNet relies on the Tcl/Tk package, which you must have installed on
your system prior to building the WordNet package.  If you have
installed Tcl/Tk in a non-standard location, you must specify the
`--with-tcl=' and `--with-tk=' options to `configure' and specify the
directory that contains the `tclConfig.sh' and `tkConfig.sh'
configuration scripts, respectively. (Note that these are usually the
same directories.)

If you're running OS X and installed the Aqua Tcl/Tk package from the
web site above, use the following settings:

     --with-tcl=/Library/Frameworks/Tcl.framework
     --with-tk=/Library/Frameworks/Tk.framework

If `configure' can't find either `tclConfig.sh' or `tkConfig.sh', it
will print an error and stop processing.

After successfully running `configure', you must then build and
install WordNet using these commands:

make
make install

Running WordNet
===============

In order to run WordNet, you must set your PATH variable to include
the directory that contains the WordNet binraries. By default, WordNet
is installed in `/usr/local/WordNet-3.0'.  

Several other environment variables may need to be set in order to
run WordNet on your system:

PATH - should include either `/usr/local/WordNet-3.0/bin' or the path
you specified with the `--prefix=' option to `configure', unless you
installed WordNet in a directory that is already in your path.

WNHOME - if you did not install in the default location, you must set
this environment variable to the value you specified on the `prefix='
option.  This tells the WordNet browser where to find the database files.

LD_LIBRARY_PATH - may need to be set to the location of the Tcl/Tk
libraries.

TK_LIBRARY - on OS X, may need to be set to the directory that
contains the `tk.tcl' file (usually a subidrectory of where the Tk
library is installed).

The command `wnb' starts the WordNet browser application.  If any
of the above variables is not set, or not set properly, an error will
occur when you run `wnb'.

The command line interface is run with the `wn' command.  The `PATH' and
`WNHOME' environment variables must also be set.

