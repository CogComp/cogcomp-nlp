
* Overview

  This library provides basic useful functionality in Java. The
  goals of this library are:

  1. Augment the Java library with useful data structures and
     algorithms that can be used across many NLP projects.

  2. Add support for recurring experiment-related tasks like
     cross-validation and inter-annotator agreement.

  3. Provide other utility classes for reading files, interface to the
     shell, etc.

     
* Functionality

  * Data structures
    - **TextAnnotation** (previously in *Edison*)
    - **Record** support (used in *Curator*)
    - Pair and Triple classes
    - Trees, where the nodes can be arbitrary objects and a utility
      class to read trees from the bracket notation (like the Penn
      Treebank notation.)
    - Queryable list to support SQL like operations on the elements of
      the list
    - Bounded priority queue, to help with beam search
  * Experiment utilities
    - P/R/F1 reporting (see *EvaluationRecord*)
    - Statistical significance testing
    - Cross-validation helper
    - Android notification sender
  * Algorithms
    - Matching arbitrary lists with patterns
    - Levenstein distance
    - Longest common subsequence
    - Searching for patterns in trees
    - Replacing parts of trees that match a pattern
    - Graph search algorithms -- breadth first, depth first, uniform
      cost and beam.
  * IO
    - Reading a file, one line at a time
    - Utility functions like mkdir, ls, etc
  * Transformers
    - A transformer defines a general purpose interface that
      transforms one object into another. This is used extensively in
      the project Edison. For example, any annotation that is
      performed on text can be thought of as the result of a
      transformer.
    - A special transformer is a Predicate, which transforms an object
      into a Boolean.
  * Search
    - Beam search
    - Breadth/Depth first search
    - Graph search
  * Miscellaneous utilities
    - ArgMax
    - Counter
    - A command line interface that uses Java reflection to expose
      static functions of a pre-defined class to the shell
    - And much more...


* Installation and Usage
  - The directory dist contains jar versions of the binaries, sources
    and javadoc.

  - If you have Maven2 installed and want to install coreUtilities in
    the maven repository, run the following:

    mvn install
    mvn javadoc:jar

    This will run the tests and create three jars in the directory
    called target: one each for binaries, sources and javadoc. Also,
    the jar will be installed into your local maven tree (typically,
    at $HOME/.m2/repository).


* Annotator and AnnotatorService
  - Annotator is an interface used by NLP components to ensure that they
    can be connected together in applications.
  - AnnotatorService manages a set of Annotator objects and caches
    their outputs in memory and to disk.  Caching behavior is configurable,
    but configuration parameters have default values set in some constructors.
    See the AnnotatorService javadoc for details.
  - You can set the 'setCacheShutdownHook' option to 'true', so that the
    cache will automatically be closed when the VM shuts down.
    Otherwise, You will need to call the AnnotatorService.closeCache() method
    after use to ensure the cache is flushed to disk and terminated properly
  - You will not be permitted to open multiple caches with the same name
    in the same VM.
  - The disk caching behavior is NOT FAULT TOLERANT (this is an option that
    is available in the enterprise version of ehcache only).

* More information
  1. The (possibly incomplete) javadoc of this library is in the doc
     directory, which is under the main project directory.

  2. The Wiki page for this library will contain example code. (This
     does not exist as of now, but will be added soon.)

  3. If you are still having problems, contact the Cognitive Computation Group
     using the illinois-ml-nlp-users email list
     (https://lists.cs.illinois.edu/lists/info/illinois-ml-nlp-users).

